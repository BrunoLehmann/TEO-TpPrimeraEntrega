// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Lexico.flex

package InterfazGrafica;
import com.sun.org.apache.xalan.internal.xsltc.compiler.sym;
import java_cup.runtime.*;
import java.util.*;

import java.io.FileInputStream;
import java.util.*;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

@SuppressWarnings("fallthrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\0"+
    "\1\4\5\0\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\3\20\1\21\3\20"+
    "\1\22\1\23\1\24\1\25\1\26\2\0\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\2\40"+
    "\1\41\1\42\1\43\1\44\2\40\1\45\1\46\1\47"+
    "\1\50\1\40\1\51\1\52\2\40\1\53\1\0\1\54"+
    "\1\0\1\55\1\0\32\40\1\56\1\0\1\57\7\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\1\1\15\1\16"+
    "\1\17\1\20\14\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\0\1\27\2\0\1\30\1\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\21\1\0\10\21\1\36\2\21\1\37"+
    "\3\21\3\0\1\40\1\41\4\21\1\42\2\21\1\43"+
    "\1\44\3\21\2\0\1\45\1\21\1\46\3\21\1\47"+
    "\1\21\1\50\1\21\1\0\1\51\1\21\1\52\1\53"+
    "\2\21\1\54\1\55\2\21\1\56\1\57\1\21\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\60\0\60\0\360"+
    "\0\60\0\60\0\u0120\0\u0150\0\u0180\0\u01b0\0\60\0\u01e0"+
    "\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360"+
    "\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\60\0\60"+
    "\0\60\0\60\0\60\0\220\0\220\0\u04b0\0\u04e0\0\60"+
    "\0\u0510\0\60\0\60\0\60\0\60\0\60\0\u0540\0\u0570"+
    "\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0"+
    "\0\u02d0\0\u0720\0\u0750\0\u02d0\0\u0780\0\u07b0\0\u07e0\0\u0810"+
    "\0\u0840\0\u0870\0\u02d0\0\u02d0\0\u08a0\0\u08d0\0\u0900\0\u0930"+
    "\0\u02d0\0\u0960\0\u0990\0\u02d0\0\u02d0\0\u09c0\0\u09f0\0\u0a20"+
    "\0\u0a50\0\u0a80\0\60\0\u0ab0\0\u02d0\0\u0ae0\0\u0b10\0\u0b40"+
    "\0\u02d0\0\u0b70\0\u02d0\0\u0ba0\0\u0bd0\0\60\0\u0c00\0\u02d0"+
    "\0\u02d0\0\u0c30\0\u0c60\0\u02d0\0\60\0\u0c90\0\u0cc0\0\u02d0"+
    "\0\u02d0\0\u0cf0\0\u02d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\5\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\2\25\1\26\1\27\1\25"+
    "\1\30\1\31\2\25\1\32\1\25\1\33\1\25\1\34"+
    "\1\35\1\25\1\36\1\25\1\37\1\40\1\41\1\42"+
    "\1\43\61\0\2\3\55\0\2\44\2\0\1\45\53\44"+
    "\15\0\2\46\3\47\5\0\6\47\50\0\1\50\47\0"+
    "\5\13\45\0\1\51\63\0\1\13\1\0\5\15\63\0"+
    "\1\52\57\0\1\53\1\54\56\0\1\55\57\0\1\56"+
    "\47\0\5\25\5\0\14\25\1\57\7\25\2\0\1\60"+
    "\17\0\5\25\5\0\10\25\1\61\4\25\1\62\6\25"+
    "\2\0\1\60\17\0\5\25\5\0\24\25\2\0\1\60"+
    "\17\0\5\25\5\0\12\25\1\63\11\25\2\0\1\60"+
    "\17\0\5\25\5\0\1\64\11\25\1\65\2\25\1\66"+
    "\3\25\1\67\2\25\2\0\1\60\17\0\5\25\5\0"+
    "\4\25\1\70\17\25\2\0\1\60\17\0\5\25\5\0"+
    "\5\25\1\71\6\25\1\72\7\25\2\0\1\60\17\0"+
    "\5\25\5\0\15\25\1\73\6\25\2\0\1\60\17\0"+
    "\5\25\5\0\16\25\1\74\5\25\2\0\1\60\17\0"+
    "\5\25\5\0\20\25\1\75\3\25\2\0\1\60\17\0"+
    "\5\25\5\0\16\25\1\76\5\25\2\0\1\60\17\0"+
    "\5\25\5\0\7\25\1\77\14\25\2\0\1\60\13\0"+
    "\1\100\3\0\2\46\3\47\5\0\6\47\34\0\1\101"+
    "\3\0\5\47\5\0\6\47\23\0\7\51\1\102\50\51"+
    "\15\0\5\25\5\0\3\25\1\103\20\25\2\0\1\60"+
    "\17\0\5\25\5\0\24\25\22\0\5\25\5\0\14\25"+
    "\1\104\7\25\2\0\1\60\17\0\5\25\5\0\15\25"+
    "\1\105\6\25\2\0\1\60\17\0\5\25\5\0\17\25"+
    "\1\106\4\25\2\0\1\60\17\0\5\25\5\0\12\25"+
    "\1\107\11\25\2\0\1\60\17\0\5\25\5\0\15\25"+
    "\1\110\6\25\2\0\1\60\17\0\5\25\5\0\16\25"+
    "\1\111\5\25\2\0\1\60\17\0\5\25\5\0\14\25"+
    "\1\112\7\25\2\0\1\60\17\0\5\25\5\0\23\25"+
    "\1\113\2\0\1\60\17\0\5\25\5\0\20\25\1\114"+
    "\3\25\2\0\1\60\17\0\5\25\5\0\3\25\1\115"+
    "\20\25\2\0\1\60\17\0\5\25\5\0\16\25\1\116"+
    "\5\25\2\0\1\60\17\0\5\25\5\0\21\25\1\117"+
    "\2\25\2\0\1\60\17\0\5\25\5\0\10\25\1\120"+
    "\13\25\2\0\1\60\20\0\1\121\1\122\56\0\1\121"+
    "\41\0\7\51\1\102\4\51\1\123\43\51\15\0\5\25"+
    "\5\0\12\25\1\124\11\25\2\0\1\60\17\0\5\25"+
    "\5\0\4\25\1\125\17\25\2\0\1\60\17\0\5\25"+
    "\5\0\17\25\1\126\4\25\2\0\1\60\17\0\5\25"+
    "\5\0\1\127\23\25\2\0\1\60\17\0\5\25\5\0"+
    "\2\25\1\130\21\25\2\0\1\60\17\0\5\25\5\0"+
    "\1\131\23\25\2\0\1\60\17\0\5\25\5\0\10\25"+
    "\1\132\13\25\2\0\1\60\17\0\5\25\5\0\4\25"+
    "\1\133\17\25\2\0\1\60\17\0\5\25\5\0\12\25"+
    "\1\134\11\25\2\0\1\60\23\0\1\135\44\0\1\136"+
    "\66\0\5\25\5\0\4\25\1\137\17\25\2\0\1\60"+
    "\17\0\5\25\5\0\4\25\1\140\17\25\2\0\1\60"+
    "\17\0\5\25\5\0\20\25\1\141\3\25\2\0\1\60"+
    "\17\0\5\25\5\0\20\25\1\142\3\25\2\0\1\60"+
    "\17\0\5\25\5\0\14\25\1\143\7\25\2\0\1\60"+
    "\17\0\5\25\5\0\4\25\1\144\17\25\2\0\1\60"+
    "\10\0\1\145\66\0\5\25\5\0\1\146\23\25\2\0"+
    "\1\60\17\0\5\25\5\0\10\25\1\147\13\25\2\0"+
    "\1\60\17\0\5\25\5\0\6\25\1\150\15\25\2\0"+
    "\1\60\17\0\5\25\5\0\14\25\1\151\7\25\2\0"+
    "\1\60\17\0\5\25\5\0\15\25\1\152\6\25\2\0"+
    "\1\60\17\0\5\25\5\0\14\25\1\153\7\25\2\0"+
    "\1\60\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3360];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\1\1\2\11\4\1\1\11"+
    "\17\1\5\11\1\0\1\1\2\0\1\11\1\0\5\11"+
    "\1\1\1\0\17\1\3\0\16\1\2\0\1\11\11\1"+
    "\1\0\1\11\6\1\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

public String eliminarCerosAlFinal(String s) {
    if(s.charAt(s.length()-1) == '0') {
        if(s.length() == 1){
            return s;
        }else{
            return eliminarCeros(s.substring(0, s.length() - 1));
        }
    }else{
        return s;
    }
}

public Boolean validarConstanteFloat(String s) {
    String[] partes = s.split("\\.");
    System.out.println(partes[0]);
    System.out.println(partes[1]);
    String parteEntera = eliminarCeros(partes[0]);
    String parteFraccionaria = eliminarCerosAlFinal(partes[1]);
    if((parteEntera == "32767")) {
        return partes[1] == "0";
    }else{
        if(validarConstanteInt(parteEntera)) {
            return parteFraccionaria.length() < 5;
        }else {
            return false;
        }
    }
}

public Boolean validarConstanteInt(String a) {
    if(a.length() > 5) {
        return false;
    }else if(a.length() < 5){
        return true;
    }else{
        return (Integer.parseInt(a) < 32768);
    }
}

public Boolean validarConstanteHexa(String a) {
    if(a.length() > 8) {
        return false;
    }else if(a.length() < 8){
        return true;
    }else{
        return (a.charAt(0) <=7);
    }
}

public String eliminarCeros(String s) {
    if(s.charAt(0) == '0') {
        if(s.length() ==1){
            return s;
        }else{
            return eliminarCeros(s.substring(1));
        }      
    }else{
        return s;
    }
}

public String[] guardarTokenInfo(String nombre, String token, String tipo, String valor, String tamanio) {
    String[] tokenInfo = new String[5];
    tokenInfo[0] = nombre;
    tokenInfo[1] = token;
    tokenInfo[2] = tipo;
    tokenInfo[3] = valor;
    tokenInfo[4] = tamanio;
    return tokenInfo;
}

public String obtenerContenidoDeArchivo(String nombreArchivo) {
    try {
        FileInputStream inputStream = new FileInputStream(nombreArchivo);
        byte[] buffer = new byte[(int) new File(nombreArchivo).length()];
        inputStream.read(buffer);
        inputStream.close();
        return new String(buffer, "UTF-8"); // Puedes especificar la codificación adecuada
    } catch (IOException e) {
        System.err.println("Error al leer el archivo: " + e.getMessage());
        return null;
    }
}

// Función para guardar la tabla de tokens
public void guardarTablaTokens(String[] tokenInfo) {
    try {
        // Nombre del archivo en el que se guardará la tabla
        String nombreArchivo = "./ts.txt";
        
        // Crear un objeto FileWriter para escribir en el archivo
        FileWriter archivo = new FileWriter(nombreArchivo, true);

        
        // Verificar si el archivo está vacío
        File file = new File(nombreArchivo);
        
        
        String contenido = obtenerContenidoDeArchivo(nombreArchivo);
        if (contenido.isEmpty()) {
            // El archivo está vacío, escribir el encabezado
            archivo.write("Nombre\tToken\tTipo\tValor\tTamaño\n");
        }

        String candidato = tokenInfo[0] + "\t" + tokenInfo[1] + "\t" + tokenInfo[2] + "\t" + tokenInfo[3] + "\t" + tokenInfo[4] + "\n";
        if (!contenido.contains(candidato)) {
            // Agregar info al archivo
            archivo.write(candidato);
        }
        

        // Cerrar el archivo
        archivo.close();
        
        System.out.println("Tabla de tokens guardada en " + nombreArchivo);
    } catch (IOException e) {
        System.err.println("Error al guardar la tabla de tokens: " + e.getMessage());
    }
}

String res = "";
String errores = "";

public String retornarStr(){
    return res;
}

public String retornarErrores(){
    return errores;
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws IOException if the reader could not be closed.
   */
  public final void yyclose() throws IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception IOException if any I/O-Error occurs.
   */
  @Override  public Symbol next_token() throws IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Caracter no permitido: <" + yytext() + "> en la linea " + yyline);
            }
          // fall through
          case 49: break;
          case 2:
            { /* no se realiza accion por lo tanto se ignoran*/
            }
          // fall through
          case 50: break;
          case 3:
            { System.out.println("Token COMILLA encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "COMILLA", "nulo",  "nulo", "nulo"));
                    res += "Token COMILLA encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 51: break;
          case 4:
            { System.out.println("Token PA encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PA", "nulo",  "nulo", "nulo"));
                    res += "Token PA encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 52: break;
          case 5:
            { System.out.println("Token PC encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PC", "nulo",  "nulo", "nulo"));
                    res += "Token PC encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 53: break;
          case 6:
            { System.out.println("Token MULTIPLICACION encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "MULTIPLICACION", "nulo",  "nulo", "nulo"));
                    res += "Token MULTIPLICACION encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 54: break;
          case 7:
            { System.out.println("Token SUMA encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "SUMA", "nulo",  "nulo", "nulo"));
                    res += "Token SUMA encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 55: break;
          case 8:
            { System.out.println("Token COMA encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "COMA", "nulo",  "nulo", "nulo"));
                    res += "Token COMA encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 56: break;
          case 9:
            { System.out.println("Token RESTA encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "RESTA", "nulo",  "nulo", "nulo"));
                    res += "Token RESTA encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 57: break;
          case 10:
            { if(validarConstanteFloat(yytext())) {
                        guardarTablaTokens(guardarTokenInfo("_" + yytext(), "CONST_FLOAT", "nulo", yytext(), "nulo"));
                        System.out.println("Token CONST_FLOAT, encontrado Lexema "+ yytext());
                        res += "Token CONST_FLOAT encontrado, Lexema "+ yytext() + "\n";
                    }else{
                        errores += "CONST_FLOAT fuera de rango en la línea " + yyline + "\n";
                        System.out.println("Error: CONST_FLOAT fuera de rango en la línea " + yyline);
                    }
            }
          // fall through
          case 58: break;
          case 11:
            { System.out.println("Token DIVISION encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "DIVISION", "nulo",  "nulo", "nulo"));
                    res += "Token DIVISION encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 59: break;
          case 12:
            { String valorEntero = eliminarCeros(yytext());
                    // Verifica si el valor está dentro del rango de 16 bits 
                    if (validarConstanteInt(valorEntero)) {
                        String[] tokenInfo = guardarTokenInfo("_" + valorEntero, "CONST_INT", "nulo",  valorEntero, "nulo");
                        guardarTablaTokens(tokenInfo);
                        System.out.println("Token CONST_INT, encontrado Lexema " + valorEntero);
                        res += "Token CONST_INT encontrado, Lexema "+ valorEntero + "\n";
                    } else {
                        errores += "CONST_INT fuera de rango de 16 bits en la línea " + yyline + "\n";
                        System.out.println("Error: CONST_INT fuera de rango de 16 bits en la línea " + yyline);
                    }
            }
          // fall through
          case 60: break;
          case 13:
            { System.out.println("Token PYC encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PYC", "nulo",  "nulo", "nulo"));
                    res += "Token PYC encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 61: break;
          case 14:
            { System.out.println("Token MENOR encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "MENOR", "nulo",  "nulo", "nulo"));
                    res += "Token MENOR encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 62: break;
          case 15:
            { System.out.println("Token IGUAL encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "IGUAL", "nulo",  "nulo", "nulo"));
                    res += "Token IGUAL encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 63: break;
          case 16:
            { System.out.println("Token MAYOR encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "MAYOR", "nulo",  "nulo", "nulo"));
                    res += "Token MAYOR encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 64: break;
          case 17:
            { System.out.println("Token ID encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "ID", "nulo",  "nulo", "nulo"));
                    res += "Token ID encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 65: break;
          case 18:
            { System.out.println("Token CA encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "CA", "nulo",  "nulo", "nulo"));
                    res += "Token CA encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 66: break;
          case 19:
            { System.out.println("Token CC encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "CC", "nulo",  "nulo", "nulo"));
                    res += "Token CC encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 67: break;
          case 20:
            { System.out.println("Token SEPARADOR encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "SEPARADOR", "nulo",  "nulo", "nulo"));
                    res += "Token SEPARADOR encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 68: break;
          case 21:
            { System.out.println("Token LLAVEA encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "LLAVEA", "nulo",  "nulo", "nulo"));
                    res += "Token LLAVEA encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 69: break;
          case 22:
            { System.out.println("Token LLAVEC encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "LLAVEC", "nulo",  "nulo", "nulo"));
                    res += "Token LLAVEC encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 70: break;
          case 23:
            { System.out.println("Token CONST_STRING, encontrado Lexema "+ yytext());
                    String content = yytext();
                    content = content.substring(1, content.length()-1);
                    guardarTablaTokens(guardarTokenInfo("_"+content, "CONST_STRING", "nulo", content, String.valueOf(yylength())));
                    res += "Token CONST_STRING encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 71: break;
          case 24:
            { System.out.println("Token MASIGUAL encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "MASIGUAL", "nulo",  "nulo", "nulo"));
                    res += "Token MASIGUAL encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 72: break;
          case 25:
            { System.out.println("Token ASIGN encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "ASIGN", "nulo",  "nulo", "nulo"));
                    res += "Token ASIGN encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 73: break;
          case 26:
            { System.out.println("Token MENIGUAL encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "MENIGUAL", "nulo",  "nulo", "nulo"));
                    res += "Token MENIGUAL encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 74: break;
          case 27:
            { System.out.println("Token DISTINTO encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "DISTINTO", "nulo",  "nulo", "nulo"));
                    res += "Token DISTINTO encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 75: break;
          case 28:
            { System.out.println("Token EQUIVALENTE encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "EQUIVALENTE", "nulo",  "nulo", "nulo"));
                    res += "Token EQUIVALENTE encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 76: break;
          case 29:
            { System.out.println("Token MAYIGUAL encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "MAYIGUAL", "nulo",  "nulo", "nulo"));
                    res += "Token MAYIGUAL encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 77: break;
          case 30:
            { System.out.println("Token PRIF encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PRIF", "nulo",  "nulo", "nulo"));
                    res += "Token PRIF encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 78: break;
          case 31:
            { System.out.println("Token PROR encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PROR", "nulo",  "nulo", "nulo"));
                    res += "Token PROR encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 79: break;
          case 32:
            { System.out.println("Token PRAND encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PRAND", "nulo",  "nulo", "nulo"));
                    res += "Token PRAND encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 80: break;
          case 33:
            { System.out.println("Token PRBIN encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PRBIN", "nulo",  "nulo", "nulo"));
                    res += "Token PRBIN encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 81: break;
          case 34:
            { System.out.println("Token PRFOR encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PRFOR", "nulo",  "nulo", "nulo"));
                    res += "Token PRFOR encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 82: break;
          case 35:
            { System.out.println("Token PRINT encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PRINT", "nulo",  "nulo", "nulo"));
                    res += "Token PRINT encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 83: break;
          case 36:
            { System.out.println("Token PRMOD encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PRMOD", "nulo",  "nulo", "nulo"));
                    res += "Token MOD encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 84: break;
          case 37:
            { /* No se realiza accion por lo tanto se ignoran*/
            }
          // fall through
          case 85: break;
          case 38:
            { System.out.println("Token PRELSE encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PRELSE", "nulo",  "nulo", "nulo"));
                    res += "Token PRELSE encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 86: break;
          case 39:
            { System.out.println("Token PRHEXA encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PRHEXA", "nulo",  "nulo", "nulo"));
                    res += "Token PRHEXA encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 87: break;
          case 40:
            { System.out.println("Token PRBOOLEANOV encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PRBOOLEANOV", "nulo",  "VERDADERO", "nulo"));
                    res += "Token PRBOOLEANOV encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 88: break;
          case 41:
            { String valor = eliminarCeros(yytext().substring(1));
                    if(valor.length() < 19) {
                        guardarTablaTokens(guardarTokenInfo("_(" + valor, "CONST_BIN", "nulo", "(" + valor, "nulo")); 
                        System.out.println("Token CONST_BIN, encontrado Lexema "+ valor);
                        res += "Token CONST_BIN encontrado, Lexema "+ "(" + valor + "\n";
                    }else{
                        errores += "CONST_BIN fuera de rango en la línea " + yyline + "\n";
                        System.out.println("Error: CONST_BIN fuera de rango en la línea " + yyline);
                    }
            }
          // fall through
          case 89: break;
          case 42:
            { System.out.println("Token PRBOOLEANOF encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PRBOOLEANOF", "nulo",  "FALSO", "nulo"));
                    res += "Token PRBOOLEANOF encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 90: break;
          case 43:
            { System.out.println("Token PRFLOAT encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PRFLOAT", "nulo",  "nulo", "nulo"));
                    res += "Token PRFLOAT encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 91: break;
          case 44:
            { System.out.println("Token PRWHILE encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PRWHILE", "nulo",  "nulo", "nulo"));
                    res += "Token PRWHILE encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 92: break;
          case 45:
            { String valor = eliminarCeros(yytext().substring(1));
                    if(validarConstanteHexa(valor)) {
                        guardarTablaTokens(guardarTokenInfo("_(" + valor, "CONST_HEX", "nulo", "(" + valor, "nulo")); 
                        System.out.println("Token CONST_HEX, encontrado Lexema "+ "(" + valor);
                        res += "Token CONST_HEXA encontrado, Lexema "+ "(" + valor + "\n";
                    }else{
                        errores +=  "CONST_HEX fuera de rango en la línea " + yyline + "\n";
                        System.out.println("Error: CONST_HEX fuera de rango en la línea " + yyline);
                    }
            }
          // fall through
          case 93: break;
          case 46:
            { System.out.println("Token PRSTRING encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PRSTRING", "nulo",  "nulo", "nulo"));
                    res += "Token PRSTRING encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 94: break;
          case 47:
            { System.out.println("Token PRBOOLEAN encontrado, Lexema "+ yytext());
                 guardarTablaTokens(guardarTokenInfo(yytext(), "PRBOOLEAN", "nulo",  "nulo", "nulo"));
                 res += "Token PRSTRING encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 95: break;
          case 48:
            { System.out.println("Token PRFUNCTION encontrado, Lexema "+ yytext());
                    guardarTablaTokens(guardarTokenInfo(yytext(), "PRFUNCTION", "nulo",  "nulo", "nulo"));
                    res += "Token FUNCTION encontrado, Lexema "+ yytext() + "\n";
            }
          // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
