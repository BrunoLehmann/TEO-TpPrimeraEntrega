

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;

parser code
{:
    /**MEetodo que se llama auntokmaticamente ante algun error sintactico*/
    public void syntax_error(Symbol s){
        Sytem.out.println("Error en la linea "  (s.rigth+1) + " columna " + s.left + ". "
            + s + " no reconocido. Valor " + s.value );
    }
:}

action code
{:
:}



/* Declaracion de Terminales*/
Terminal ID, CONST_INT, CONST_STRING, CONST_FLOAT, 
CONST_BIN, CONST_HEXA, DEFINE, ENDDEFINE, PROGRAM, 
END, MENOR, MAYOR, INT, FLOAT, STRING, COMA, DP, 
PYC, CA, CC, PA, PC, LLAVEA, LLAVEC, ASIG, IF, ELSE, 
WHILE, RETURN, WRITE, MAYIGUAL, MENIGUAL, MENOR, MAYOR, 
EQUIVALENTE, DISTINTO, SUMA, RESTA, MULTIPLICACION, 
DIVISION, AND OR;

/* Declaracion de No Terminales */
non terminal program, bloqueDeclaraciones, declaraciones, 
listaDeclaracion, declaracion, tipoDato, pgm, pgm1, programa, 
programa1, sentencia,, asignacionMultiple, listaAsignacion, 
iteracion, seleccion, contar, condicionContar, conmparacionContar, 
write, writeCte, condicion, comparacion, comparador, expresion, 
termino, factor, lista, constante;



start with pgm;

pgm ::= program {: Sytem.out.println("pgm Regla 0. Compila correctamente llegando al simbolo start"):}

program ::= bloqueDeclaraciones  pgm1 {: Sytem.out.println("[Regla ] Programa con declaraciones"):}
            | pgm2{: Sytem.out.println("[Regla ] Programa sin declaraciones"):}

bloqueDeclaraciones ::= DEFINE declaraciones ENDDEFINE {: Sytem.out.println("[Regla ] BloqueDeclaraciones"):}

declaraciones ::= declaraciones listaDeclaracion {: Sytem.out.println("[Regla ] Declaraciones"):}
                | listaDeclaracion {: Sytem.out.println("[Regla ] ListaDeclaracion"):}
        
listaDeclaracion ::= MENOR  declaracion MAYOR {: Sytem.out.println("[Regla ] MENOR  Declaracion >"):}

declaracion ::= tipoDato COMA declaracion COMA ID {: Sytem.out.println("[Regla ] Declaracion"):}
                | tipoDato MAYOR DP MENOR ID {: Sytem.out.println("[Regla ] Tipo_Dato > : < ID"):}

tipoDato ::= INT:val {: Sytem.out.println("[Regla ] Tipo dato  = " + val); RESULT = val; :}
            | FLOAT:val {: Sytem.out.println("[Regla ] Tipo dato  = " + val); RESULT = val; :}
            | STRING:val {: Sytem.out.println("[Regla ] Tipo dato  = " + val); RESULT = val; :}

pgm1 ::= PROGRAM programa1 END {: Sytem.out.println("[Regla ] Programa con variables"):}

pgm2 ::= PROGRAM programa2 END {: Sytem.out.println("[Regla ] Programa solo de write"):}

programa1 ::= sentencia {: Sytem.out.println("[Regla ] Sentencia"):}

programa1 ::= programa1 sentencia    {: Sytem.out.println("[Regla ] Sentencias"):}

sentencia ::= asignacionMultiple {: Sytem.out.println("[Regla ] AsignacionMultiple"):}

sentencia ::= iteracion {: Sytem.out.println("[Regla ] Iteracion"):}

sentencia ::= seleccion {: Sytem.out.println("[Regla ] Seleccion"):}

sentencia ::= write {: Sytem.out.println("[Regla ] Write"):}

programa2 ::= programa2 writeCte {: Sytem.out.println("[Regla ] Write de constantes"):}
            | writeCte {: Sytem.out.println("[Regla ] WriteCte "):}

<asignacionMultiple ::= listaAsignacion ASIGN expresion {: Sytem.out.println("[Regla ] ListaAsignacion ASIGN Expresion"):}
                | listaAsignacion ASIGN CONST_STRING {: Sytem.out.println("[Regla ] ListaAsignacion ASIGN CONST_STRING"):}

listaAsignacion ::= listaAsignacion ID ASIGN {: Sytem.out.println("[Regla ] ListaAsignacion ID ASIGN"):}
                | ID:id {: Sytem.out.println("[Regla ] Variable ID Valor = " + id):}

contar ::= CONTAR PA condicionContar PYC CA lista CC PC {: Sytem.out.println("[Regla ] Contar"):}
        | CONTAR PA <condicionContar> PYC CA CC PC {: Sytem.out.println("[Regla ] Contar Vacio"):}

write ::= WRITE ID {: Sytem.out.println("[Regla ] WRITE ID"):}
        | writeCte {: Sytem.out.println("[Regla ] WriteCte"):}


writeCte ::= WRITE constante {: Sytem.out.println("[Regla ] WRITE Constante"):}
        | WRITE CONST_STRING {: Sytem.out.println("[Regla ] WRITE CONST_STRING"):}

iteracion ::= WHILE PA condicion PC LLAVEA programa LLAVEC {: Sytem.out.println("[Regla ] Iteracion While"):}

seleccion ::= IF PA condicion PC LLAVEA programa LLAVEC ELSE LLAVEA programa LLAVEC {: Sytem.out.println("[Regla ] Seleccion If/Else"):}

seleccion ::= IF PA condicion PC LLAVEA programa LLAVEC {: Sytem.out.println("[Regla ] Seleccion If"):}

condicion ::= comparacion {: Sytem.out.println("[Regla ] Comparacion"):}

condicion ::= comparacion AND comparacion {: Sytem.out.println("[Regla ] Comparacion AND Comparacion"):}

condicion ::= comparacion OR comparacion {: Sytem.out.println("[Regla ] Comparacion OR Comparacion"):}

comparacion ::= expresion comparador expresion {: Sytem.out.println("[Regla ] Expresion Comparador Expresion"):}  

condicionContar ::= comparacionContar {: Sytem.out.println("[Regla ] Comparacion_Contar"):}

condicionContar ::= comparacionContar AND comparacionContar {: Sytem.out.println("[Regla ] Comparacion_Contar AND Comparacion_Contar"):}

condicionContar ::= comparacionContar OR comparacionContar {: Sytem.out.println("[Regla ] Comparacion_Contar OR Comparacion_Contar"):}

comparacionContar ::= comparador expresion {: Sytem.out.println("[Regla ] Comparador Expresion"):}

comparador ::= MAYIGUAL {: Sytem.out.println("[Regla ] Simbolo >= "):} 
        | MENIGUAL  {: Sytem.out.println("[Regla ] Simbolo <= "):} 
        | MENOR {: Sytem.out.println("[Regla ] Simbolo < "):}
        | MAYOR {: Sytem.out.println("[Regla ] Simbolo > "):}
        | EQUIVALENTE {: Sytem.out.println("[Regla ] Simbolo == "):}
        | DISTINTO {: Sytem.out.println("[Regla ] Simbolo <> "):}    

expresion ::= expresion SUMA termino {: Sytem.out.println("[Regla ] Expresion + Termino"):} 
        | expresion RESTA termino {: Sytem.out.println("[Regla ] Expresion - Termino"):}
        | termino {: Sytem.out.println("[Regla ] Termino "):}

termino ::= termino MULTIPLICACION factor {: Sytem.out.println("[Regla ] Termino * Tactor"):}
        | termino  DIVISION factor {: Sytem.out.println("[Regla ] Termino / Tactor "):} 
        | factor {: Sytem.out.println("[Regla ] Factor"):}

factor ::= PA expresion PC {: Sytem.out.println("[Regla ] Parentesis_Abierto Expresion Parentesis_Cerrado"):} 
        | ID:id  {: Sytem.out.println("[Regla ] Factor ID = " + id); RESULT = id;:}
        | constante {: Sytem.out.println("[Regla ] constante"):}
        | contar {: Sytem.out.println("[Regla ] Funcion Contar"):}

lista ::=  lista COMA expresion {: Sytem.out.println("[Regla ] Lista"):}
        | expresion {: Sytem.out.println("[Regla ] Expresion "):}

constante ::= CONST_INT:val {: Sytem.out.println("[Regla ] Constante = " + val); RESULT = val; :}
        | CONST_FLOAT:val {: Sytem.out.println("[Regla ] Constante = " + val); RESULT = val; :}
        | CONST_BIN:val {: Sytem.out.println("[Regla ] Constante = " + val); RESULT = val; :}
        | CONST_HEXA:val {: Sytem.out.println("[Regla ] Constante = " + val); RESULT = val; :}

